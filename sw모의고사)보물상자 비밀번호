#include <iostream>
#include<deque>
#include<string>
#include<vector>
#include<algorithm>
using namespace std;

int T;
int res;
string num;
// 숫자 총 길이 & k번째로 큰 수 & d는 len/4-1 로 몇 번 회전까지 의미 있는 회전인지
int len, k, d;
// 조합된 숫자를 중복 없이 담음
set<int> s;
// 숫자 나열
deque<int> deq;

// 초기화 함수
void init() {
	scanf("%d%d", &len, &k);
	deq.clear(); s.clear();
	res = 0; num = "";
	d = len / 4 - 1;
}
// 숫자 입력받는 함수
void get_nums() {
	cin >> num;
	for (int i = 0; i < num.length(); i++) {
		int temp = num[i];
		if (temp < 'A') temp -= '0';
		else temp = temp - 'A' + 10;
		deq.push_back(temp);
	}
}
// set에 숫자들을 추가하는 함수(한 번 회전할 때마다 호출)
void add_set() {
	// sep은 몇개씩 건너뛰어야 하는지
	int sep = len / 4;
	for (int i = 0; i < len; i += sep) {
		//i 부터 i+sep-1 까지
		// 16을 pow(dim) 만큼 제곱해줌
		int dim = 0;
		// set에 추가 할 숫자
		int temp = 0;
		for (int j = i + sep - 1; j >= i; j--) {
			temp+=deq[j]*pow(16, dim);
			dim++;
		}
		// set에 추가해 중복을 제거해줌
		s.insert(temp);
	}
}
// 내림차순 정렬
bool compare(int a, int b) { return a > b; }
int get_res() {
	//k,set 을 이용함
	vector<int> v;
	for (auto it = s.begin(); it != s.end(); it++) {v.push_back(*it);}
	sort(v.begin(), v.end(), compare);
	return v[k - 1];
}
void rotate() {
	for (int r = 0; r < d; r++) {
		// 맨앞에 놈을 맨 뒤로 보내줌
		int temp = deq[0]; deq.pop_front();
		deq.push_back(temp);
		add_set();
	}
}
int main() {	
	scanf("%d", &T);
	for (int i = 1; i <= T; i++) {
		// 초기화 부분
		init();
		get_nums();
		// 숫자들을 s에 넣음
		add_set();
		// d번 만큼 회전시킴
		rotate();
		// k번 째로 큰 놈을 구함
		res = get_res();
		
		printf("#%d %d\n", i, res);
	}
	return 0;
}
